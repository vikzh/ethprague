#include "imports/stdlib.fc";
#include "imports/utils.fc";
#include "imports/op_codes.fc";
#include "imports/errors.fc";
#include "imports/message.fc";

#pragma version >=0.4.4;

const storage_fee = 5000000; ;; 0.005 TON
const exec_fee = 30000000;  ;; 0.03 TON
const reserve_fee = 1000000;  ;; 0.001 TON


(slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; admin_address
        ds~load_ref() ;; user_escrow_code
    );
}

() save_data(slice admin_address, cell user_escrow_code) impure inline {
    set_data(begin_cell()
        .store_slice(admin_address)
        .store_ref(user_escrow_code)
        .end_cell()
    );
}


() create_ton_escrow(
    slice owner_address,
    cell user_escrow_code,
    int query_id,
    int order_id,
    int from_amount,
    int to_network,
    int to_address,
    int to_amount,
    int hash_key
) impure {
    raw_reserve(reserve_fee, 4);

    cell state_init = calculate_user_escrow_state_init(
        owner_address,
        my_address(),
        user_escrow_code,
        order_id
    );
    slice to_contract_address = calculate_user_escrow_address(state_init);

    var msg_body = begin_cell()
        .store_op(op::create_order)
        .store_query_id(query_id)
        .store_uint(order_id, 32)
        .store_coins(from_amount)
        .store_uint(to_network, 8)
        .store_uint(to_address, 256)
        .store_uint(to_amount, 128)
        .store_uint(hash_key, 256)
        .end_cell();
    send_message_with_stateinit(to_contract_address, msg_body, state_init, 0, CARRY_REMAINING_BALANCE);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    (_, cell user_escrow_code) = load_data();

    if (op == "create_order"c) {
        int order_id = in_msg_body~load_uint(32);

        int from_amount = in_msg_body~load_coins();
        throw_unless(error::not_enough_ton, msg_value > from_amount + exec_fee);

        int to_network = in_msg_body~load_uint(8);
        int to_address = in_msg_body~load_uint(256);
        int to_amount = in_msg_body~load_uint(128);
        int hash_key = in_msg_body~load_uint(256);

        create_ton_escrow(
            sender_address,
            user_escrow_code,
            query_id,
            order_id,
            from_amount,
            to_network,
            to_address,
            to_amount,
            hash_key
        );
        return ();
    }

    throw(0xffff);
}

slice get_order_address(slice owner_address, int order_id) method_id {
    (_, cell user_escrow_code) = load_data();
    cell state_init = calculate_user_escrow_state_init(
        owner_address,
        my_address(),
        user_escrow_code,
        order_id
    );
    return calculate_user_escrow_address(state_init);
}
